Pacific herring genome
===
_Coding notes_

Nov 17, 2017
---

* Downloading data from Tony's account using wget

* downloaded supernova as per website description and ran sitecheck and testrun

Nov 21, 2017
---

* Downloaded trimmomatic-0.36 in the program subfolder
* Starting to trim the original raw reads

Nov 22 2017
---

* Finished trimming - statistics can be found in ```/scripts/trim/phgenome_trim.output```

* Started fastqc (version 0.11) to look at the quality of output

* FastQC looks fine, but files are unrecognizeable by supernova after trimming. Thus, I will assemble using raw reads.

* Started assembly with supernova (script in /scirpts/assembly/ directory)

Nov 29 2017
---

* Starting run of the assembly on Mike Miller's bigmem node

```srun -A millermrgrp -p bigmemh -t 5 hostname```

Nov-Feb
---
* Ran supernova assembly on XSEDE cluster because it had 2TB Ram. Code for assembly was

```
/pylon5/bi4ifup/eoziolor/program/supernova-2.0.0/supernova-cs/2.0.0/bin/run \
--id phgenome3 \
--maxreads 340000000 \
--fastqs /pylon5/bi4ifup/eoziolor/phgenome/data/raw/ \
--localcores=28 
```

Feb 12 2018
---

* Downloaded phgenome3 (assembly with 56x coverage) of Pacific herring genome
* Used mkoutput to create a fasta file with bubble information in it (megabubble). Found in 
```
#!/bin/bash

#SBATCH -J fastagen
#SBATCH -o /home/eoziolor/phgenome/scripts/fasta/phg_fasta_%j.o
#SBATCH -e /home/eoziolor/phgenome/scripts/fasta/phg_fasta_%j.o
#SBATCH --time=7-00:00
#SBATCH --mem=60000

my_super=/home/eoziolor/program/supernova-2.0.0/supernova
my_out=/home/eoziolor/phgenome/data/assembly3/outs/assembly
my_fasta=/home/eoziolor/phgenome/data/assembly3/fasta/phgenome

$my_super mkoutput \
--asmdir=$my_out \
--outprefix=$my_fasta \
--style=megabubbles \
--headers=full
```

Feb 27, 2018
---

* converted .gz to .bgz with bgzip
* indexing genome to find true size of assembly including smaller scaffolds

Mar 30, 2018
---

* Subsetted the genome using cat of the number of reads we need divided by 2 for each of the R1 and R2.
* Number of reads calculated by coverage for the following:
55x - 340 000 000
70x - 433 000 000
85x - 526 000 000
100x - 618 000 000
128x - 771 607 516

* Then I concatenate the resulting files and run custom python script on them to determine # of unique kmers
    * did not work, but I am moving onto the ARKS pathway

Apr 20 2018
---

* used anaconda3 module: module load anaconda3

* created an environment in phgenome:
```
conda create -n phgenome python=3.6
```

* should activate with: 

```
source activate phgenome
```

* Need to install pip in the environment (otherwise it uses global pip)

```
conda install -n phgenome pip
```

Jun 18 2018
--------
### Re-scaffolding genome
* Going to use the [ARKS pipeline](https://github.com/bcgsc/arks) to create a better assembly from the simple (pseudohaploid) fasta that I created:

```
#!/bin/bash

#SBATCH -J fastagen
#SBATCH -o /home/eoziolor/phgenome/scripts/fasta/phg_fasta_%j.o
#SBATCH -e /home/eoziolor/phgenome/scripts/fasta/phg_fasta_%j.o
#SBATCH --time=0-01:00
#SBATCH --mem=60000

my_super=/home/eoziolor/program/supernova-2.0.0/supernova
my_out=/home/eoziolor/phgenome/data/assembly3/outs/assembly
my_fasta=/home/eoziolor/phgenome/data/assembly3/fasta/phgenome

$my_super mkoutput \
--asmdir=$my_out \
--outprefix=$my_fasta \
--style=pseudohap \
--headers=full
```
* Plus interleaved read file containing all of the reads I have
* trying long ranger basic for filtering and creating a bam file out of the fastqs

```
#!/bin/bash -l
#SBATCH -J longbasic
#SBATCH -o longbasic-%j.o
#SBATCH -e longbasic-%j.o
#SBATCH -N 1
#SBATCH -n 8
#SBATCH --time=1-00:00
#SBATCH --mem=60000
#SBATCH --no-requeue
#SBATCH -p high

#programs and files
long=/home/eoziolor/program/longranger-2.2.2/longranger
path=/home/eoziolor/phgenome/data/raw/
id=PH-Sitka-93_S1_L008

cd /home/eoziolor/phgenome/data/raw/
#code
$long basic \
--id=$id \
--fastqs=$path \
--bam
```

* Found out that ARKS only takes FASTQ interleaved files; using longranger basic to do that:

```
#!/bin/bash -l
#SBATCH -J fastqbasic
#SBATCH -o fastqbasic-%j.o
#SBATCH -e fastqbasic-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --time=2-00:00
#SBATCH --mem=60000
#SBATCH --no-requeue
#SBATCH -p high

#programs and files
long=/home/eoziolor/program/longranger-2.2.2/longranger
path=/home/eoziolor/phgenome/data/raw/
id=NewFastq

cd /home/eoziolor/phgenome/data/raw/
#code
$long basic \
--id=$id \
--fastqs=$path
```

Jul 23 2018
--------
* Links is having issues with the python5 environment when trying to create a BloomFilt
    * I silenced the following lines from the LINKS run file:

```
#use lib "$FindBin::Bin/./lib/bloomfilter/swig";
#use BloomFilter;
```
* as per recommendation from the author, since I am only using links with ARKS

https://github.com/bcgsc/LINKS/issues/15

### SUPER IMPORTANT #2 of the day

* I added:

```
SHELL := /bin/bash
```

* and created a new arks-make file, now called arks-make2. This defintes the shell script for the file to be bash rather than sh. sh has an issue:
* it doesn't recognize "|$" to place standard error in a file, so I'm testing it out.

Jul 24, 2018
---
* Waiting for the fastq interleaved file to be created - it takes forever!

## Genome annotation
* in the meantime I will install the software from the steps outlined [here](https://uswest.ensembl.org/Astyanax_mexicanus/Info/Annotation) to begin annotation as soon as I have a better genome

### Repeat masker installation

* Downloading and installing the dependency RMBlast Source Package and Patch File

```
curl -O ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.6.0/ncbi-blast-2.6.0+-src.tar.gz
curl -O http://www.repeatmasker.org/isb-2.6.0+-changes-vers2.patch.gz

tar -zxvf ncbi-blast-2.6.0+-src.tar.gz
gunzip isb-2.6.0+-changes-vers2.patch.gz

cd ncbi-blast-2.6.0+-src
patch -p1 < ../isb-2.6.0+-changes-vers2.patch

cd c++
./configure --with-mt --prefix=/home/eoziolor/program/ncbi-blast-2.6.0+-src/ --without-debug
make
make install
```
This last step takes FOREVER!

* Throws an error, so I'll try installing without the patch.




* Downloaded Tandem Repeats Finder from [here](http://tandem.bu.edu/trf/trf409.linux64.download.html)
* moved it to farm with

```
scp -P 2022 ~/Downloads/trf409.linux64 farm:/home/eoziolor/program/
```

July 25, 2018
---
## Genome re-assembly
* Finally the interleaved fastq file was created
* Now I just need to run arks-make2 in order to try and run this pipeline
    * the stupid pipeline doesn't run with a gzipped file
```
gzip phgenome.hap.fasta.gz > phgenome.hap.fa
```


* Created links to the files into the same directory because the program needs to be run from one directory with the files.

```
ln -s /home/eoziolor/phgenome/data/assembly3/fasta/phgenome.hap.fa /home/eoziolor/phgenome/data/arks/
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/arks/
```

* First attempt at running the arks script

```
#!/bin/bash -l

#SBATCH -J runarks
#SBATCH -o runarks-%j.o
#SBATCH -e runarks-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=2-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/arks/

#files
my_fasta=phgenome.hap
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-6000 \
a=0.9 \
o=3 \
threads=16 
```

## Genome annotation
* So the RMBlast package is just not working out for installation, I will try another of the 4 packages
* Starting with HMMER:
    * installation

```
wget http://eddylab.org/software/hmmer/hmmer-3.2.1.tar.gz
tar xf hmmer-3.2.1.tar.gz
cd hmmer-3.2.1
./configure --prefix=/home/eoziolor/program/hmmer-3.2.1
make
make check
```
* Well that was freaking fantastic. Worked like butter on toast. Ok sticking with HMMER for the dependency search engine for RepeatMasker
    * added a path to ~/.bashrc to make these executed by name

```
export PATH=/home/eoziolor/program/hmmer-3.2.1/src:$PATH
```

* Ok, it's time to download and install RepeatMasker itself:

```
curl -O http://www.repeatmasker.org/RepeatMasker-open-4-0-7.tar.gz
tar -xvzf RepeatMasker-open-4-0-7.tar.gz 
```

* I registered for the RepeatMasker edition of RepBase. Once I have it, I can put the library into the RepeatMasker/Libraries folder
* Checking for updates of Dfam-hmm.gz - none
* Configure the RepeatMasker program - reconfigure after you add any library

```
cd RepeatMasker
perl ./configure
```

* RepeatMasker successfully installed with configured Hmmer as search engine
* Got registration permission for RepBase: download to computer and then install

```
cd /home/eoziolor/program/RepeatMasker
tar xvzf RepBaseRepeatMaskerEdition-20170127.tar.gz
```
* reconfigured with RepBase database included

### Beginning installation of RepeatModeler

#### Dependencies:
1. Perl - check
2. RepeatMasker + Libraries - check
3. RECON - De Novo Repeat Finder

```
curl -O http://www.repeatmasker.org/RepeatModeler/RECON-1.08.tar.gz
tar -xvzf RECON-1.08.tar.gz 
cd RECON-1.08/scripts/
nano recon.pl
# script "recon.pl" in the scripts directory -- on the third line, add
#the path to the binaries (the bin directory here) between the double quotes
#line: /home/eoziolor/program/RECON-1.08/bin/
cd ../src/
make
make install
```

4. RepeatScout - De Novo Repeat Finder, Price A.L., Jones N.C. and Pevzner P.A.

```
curl -O http://www.repeatmasker.org/RepeatScout-1.0.5.tar.gz
tar -xvzf RepeatScout-1.0.5.tar.gz
make
```
   
5. TRF - check

```
mv trf409.linux64 trf
```
* reconfigured RepeatMasker to work with this new file name instead with the old one

6. NSEG - Low complexity sequence identification

```
wget --no-parent -r ftp://ftp.ncbi.nih.gov/pub/seg/nseg
mv ftp.ncbi.nih.gov/pub/seg/nseg .
make
```
7. Search engine that I can't install...let's see if we can do this with HMMER

#### Installing RepeatModeler

```
curl -O http://www.repeatmasker.org/RepeatModeler/RepeatModeler-open-1.0.11.tar.gz
tar -xvzf RepeatModeler-open-1.0.11.tar.gz
cd RepeatModeler-open-1.0.11
#To load the latest 5.26 perl with JSON module do:
module load perl
perl ./configure
```
* guess what...the program doesn't work with HMMER...suprise surprise. Ok let's give RMBlast another go

* RMBlast - trying previous binaries 

```
curl -O ftp://ftp.ncbi.nlm.nih.gov/blast/executables/rmblast/2.2.28/ncbi-rmblastn-2.2.28-x64-linux.tar.gz
curl -O ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.2.28/ncbi-blast-2.2.28+-x64-linux.tar.gz

tar zxvf ncbi-blast-2.2.28+-x64-linux.tar.gz
tar zxvf ncbi-rmblastn-2.2.28-x64-linux.tar.gz

cp ncbi-rmblastn-2.2.28/* ncbi-blast-2.2.28+/
cp ncbi-rmblastn-2.2.28/bin/* ncbi-blast-2.2.28+/bin/

rm -rf ncbi-rmblastn-2.2.28
mv ncbi-blast-2.2.28+ rmblast-2.2.28
```

### Reconfiguring RepeatMasker before configuring RepeatModeler

```
module load perl

cd /home/eoziolor/program/RepeatMasker/
perl ./configure

cd /home/eoziolor/program/RepeatModeler-open-1.0.11/
perl ./configure
```
## Genome re-assembly cont'd

* Moving all of the output files into the akrs1 directory for the first iteration of the arks
* Starting second iterations

```
cd /home/eoziolor/phgenome/data/arks/
mkdir arks1
mv * akrs1
mkdir arks2
```

* creating symlinks to the necessary files

```
ln -s /home/eoziolor/phgenome/data/arks/arks1/phgenome.hap_c5_m50-6000_k30_r0.05_e30000_z500_l5_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/arks/arks2/arks1.fa

ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/arks/arks2/

```

* Running second iteration of ARKS = arks2
    * running with default parameters this time.

```
#!/bin/bash -l

#SBATCH -J runarks2
#SBATCH -o runarks2-%j.o
#SBATCH -e runarks2-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/arks/arks2/

#files
my_fasta=arks1
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.3 \
o=3 \
threads=16 
```

Jul 26, 2018
---

## Genome re-assembly
* second iteration of ARKS was less than exciting - 10kb increase in N50.
* About to try playing with parameters
    * See Supplementary table 4 for recommended ranges of parameters that are found acceptable by authors
* switching a from 0.3 to 0.9 (suggested in paper for larger max scaffold and n50 contiguity). That's the LINKS maximum link ratio
* leaving -e to 30000, to consider slightly longer contigs. Don't understand this parameter fully. Need to ask further. __Consider changing in future iterations__.
* dropping minimum number of read pairs with barcode from 5 to 4 (-c=3)
* since reads get thrown out for multiplicity range, I want to check why. Downloading multiplicity csv file to look at distribution
    * see code in R (combined.Rmd)
    * Turns out we have a bunch of reads that only have 1 pair with a barcode...super unhelpful for a large assembly
    * also makes it meaningless to change multiplicity range because the ones below 50 are pretty much lone pairs and there are non above 10 000 - Good to know!
* Moving p-value to 0.1 because 0.05 is a strange parameter anyways (r=0.1). Also paper suggests that this is acceptable.
* Moving links parameter l, to match the minimum number of pairs we specified to arks - 3 pairs for each node (l=3), paper suggests this as the minimum parameter.
* allowing LINKS to consider lower sequence length as well. Paper suggests 250 is ok, while default is 500 (z=250)



```
ln -s /home/eoziolor/phgenome/data/arks/arks2/arks1_c5_m50-10000_k30_r0.05_e30000_z500_l5_a0.3.scaffolds.fa /home/eoziolor/phgenome/data/arks/arks3/arks2.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/arks/arks3/
```

```
#!/bin/bash -l

#SBATCH -J runarks3
#SBATCH -o runarks3-%j.o
#SBATCH -e runarks3-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/arks/arks3/

#files
my_fasta=arks2
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
o=3 \
c=3 \
e=30000 \
r=0.1 \
l=3 \
z=250 \
threads=16 
```
* Find the ARKS paper [here](https://academic.oup.com/bioinformatics/article/34/5/725/4562503)

### ARKS run4

* Time to focus on some of the smaller contigs and bring them up: I will alter the e value down to 10000 in order to focus on the shorter contigs and try to re-stitch those together


```
ln -s /home/eoziolor/phgenome/data/arks/arks3/arks2_c3_m50-10000_k30_r0.1_e30000_z250_l3_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/arks/arks4/arks3.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/arks/arks4/
```

```
#!/bin/bash -l

#SBATCH -J runarks4
#SBATCH -o runarks4-%j.o
#SBATCH -e runarks4-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/arks/arks4/

#files
my_fasta=arks3
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
o=3 \
c=3 \
e=10000 \
r=0.1 \
l=3 \
z=250 \
threads=16 
```
### ARKS run5

* Let's alter the e parameter up slightly to fix some of the now bigger scaffolds e=20000


```
ln -s /home/eoziolor/phgenome/data/arks/arks4/arks3_c3_m50-10000_k30_r0.1_e10000_z250_l3_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/arks/arks5/arks4.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/arks/arks5/
```

```
#!/bin/bash -l

#SBATCH -J runarks5
#SBATCH -o runarks5-%j.o
#SBATCH -e runarks5-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/arks/arks5/

#files
my_fasta=arks4
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
o=3 \
c=3 \
e=20000 \
r=0.1 \
l=3 \
z=250 \
threads=16 
```

### ARKS run6

* Let's alter the e parameter up slightly to fix some of the now bigger scaffolds e=30000
* Returning the parameters to slightly more stringent.
* c=5;l=5;r=0.05


```
ln -s /home/eoziolor/phgenome/data/arks/arks5/arks4_c3_m50-10000_k30_r0.1_e20000_z250_l3_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/arks/arks6/arks5.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/arks/arks6/
```

```
#!/bin/bash -l

#SBATCH -J runarks6
#SBATCH -o runarks6-%j.o
#SBATCH -e runarks6-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/arks/arks6/

#files
my_fasta=arks5
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
o=3 \
c=5 \
e=30000 \
r=0.05 \
l=5 \
z=250 \
threads=16 
```

### ARKS run7

* Keeping stringent parameters, even though we only get about 100kb increase in N50 at a time, I think at this point that's necessary. When scaffolding the shorter fragments, it may be alright to relax them as in shorter scaffolds you get less read pairs to put them together.
* I want to go back in e value back to 10000 and focus on the small scaffolds. I will keep the rest of the values the same, to see the effect of just e.



```
ln -s /home/eoziolor/phgenome/data/arks/arks6/arks5_c5_m50-10000_k30_r0.05_e30000_z250_l5_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/arks/arks7/arks6.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/arks/arks7/
```

```
#!/bin/bash -l

#SBATCH -J runarks7
#SBATCH -o runarks7-%j.o
#SBATCH -e runarks7-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/arks/arks7/

#files
my_fasta=arks6
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
o=3 \
c=5 \
e=10000 \
r=0.05 \
l=5 \
z=250 \
threads=16 
```
## Genome re-assembly
### ARKS pipeline re-start

* Spoke to the author of the paper and he suggested that I run tigmint before the first iteration of the assembly, but run as I have from there on.
    * This is mostly to correct for any misassemblies that could have happened to the scaffolds in the initial supernova assembly
* Tigmint is already installed, just have to make sure that python3 is loaded when script starts
* Start by creating the symlinks in a new directory called tigarks

```
ln -s /home/eoziolor/phgenome/data/assembly3/fasta/phgenome.hap.fa /home/eoziolor/phgenome/data/tigarks/arks1/supernova.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks1/
```
* Now let's run arks
    * putting parameters as relatively stringent
    * adding kmer size of 42 due to Titus recommendations
    * Let's see how it goes

```
#!/bin/bash -l

#SBATCH -J runarks1
#SBATCH -o runarks1-%j.o
#SBATCH -e runarks1-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

module load python3
source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks1/

#files
my_fasta=supernova
my_reads=barcoded

#code
arks-make2 arks-tigmint \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=5 \
e=10000 \
r=0.05 \
l=5 \
z=250 \
k=42 \
threads=16 \
t=16
```
July 28, 2018
===

* So the Tigmint has been failing at creating a new .bam file because for some reason the script of samtools is forcing it to write into a /tmp directory. I will try to run that script separately, altered for directory, and then feed tigmint the bamfile.

```
#!/bin/bash -l

#SBATCH -J bamcreate
#SBATCH -o bamcreate-%j.o
#SBATCH -e bamcreate-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=2-00:00
#SBATCH --no-requeue
#SBATCH -p high

module load python3
source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks1/

#files
my_fasta=supernova
my_reads=barcoded

#code
bwa mem -t16 -pC supernova.fa barcoded.fq.gz |\
samtools view -u -F4 |\
samtools sort -@16 -tBX \
-o supernova.barcoded.sortbx.bam
```

July 30, 2018
===
* So the script for bwa and samtools to create a barcoded aligned .bam worked just fine. I am copying it to another directory (just in case). Now I will run the tigmint+arks pipeline, hoping it will recognize the bam and not try to recreate it again.

* I am having issues with tigmint-molecule loading pysam from the general environment rather than the pysam that I want it to. This is why I am running that line separately and loading the bio3 environment which has a pysam that is dependent on python3, not the python2 old version of pysam that is on the general module list

```
#!/bin/bash -l

#SBATCH -J molecule
#SBATCH -o molecule-%j.o
#SBATCH -e molecule-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

module load bio3

cd /home/eoziolor/phgenome/data/tigarks/arks1/

#files
my_bam=supernova.barcoded.sortbx.bam
my_reads=barcoded
my_tigm=/home/eoziolor/program/tigmint/bin/tigmint-molecule

#code
$my_tigm $my_bam | sort -k1,1 -k2,2n -k3,3n >supernova.reads.molecule.bed
```
* this works just fine. Now I will finish off the process with:

```
 #!/bin/bash -l

#SBATCH -J runarks1
#SBATCH -o runarks1-%j.o
#SBATCH -e runarks1-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=2-00:00
#SBATCH --no-requeue
#SBATCH -p high

#source ~/.bashrc
export PATH=/home/eoziolor/program/tigmint/bin:$PATH
export PATH=/home/eoziolor/program/arks/Examples:$PATH
export PATH=/home/eoziolor/program/arks/Arks:$PATH
module load bio3

cd /home/eoziolor/phgenome/data/tigarks/arks1/

#files
my_fasta=supernova
my_reads=barcoded

#code
arks-make2 arks-tigmint \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=5 \
e=10000 \
r=0.05 \
l=5 \
z=250 \
k=42 \
threads=16 \
t=16
```

* I can probably run this last bit isntead of all the middle parts. Oh well, for the next iterations I'll only have to run arks without tigmint.


* Ok, there's more dependencies that I need for this, so I'm just going to install conda and run from there

```
module load conda3
conda create -n phgenome
source activate phgenome

conda config --add channels r
conda config --add channels bioconda

conda install pysam
conda install -c bioconda pybedtools
conda install -c conda-forge intervaltree
conda install -c conda-forge statistics 
conda install cython
conda install -c bioconda bedtools htslib
```

* Trying new environment
```
conda create -n pybed_phgenome -c daler pybedtools bedtools python=3
```

* Ok so initially that didn't work because it was giving me issues with __init__.py. So I found [this article](http://python-notes.curiousefficiency.org/en/latest/python_concepts/import_traps.html) that helps understand how that is an issue. I went into

```
/home/eoziolor/.conda/envs/pybed_phgenome/lib/python3.6/site-packages/pybedtools
mv __init__.py __changedinit__.py
```

* Fucking works. Let's try it again.

```
conda install pysam
conda install -c bioconda pybedtools
conda install -c conda-forge intervaltree
conda install -c conda-forge statistics 
conda install cython
conda install -c bioconda bedtools htslib
```

July 31, 2018
===

* Ok that's a bust.

* Bill was able to install the dependencies in the bio3 package, so I am running the script below again

```
#!/bin/bash -l

#SBATCH -J runarks1
#SBATCH -o runarks1-%j.o
#SBATCH -e runarks1-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=2-00:00
#SBATCH --no-requeue
#SBATCH -p high

export PATH=/home/eoziolor/program/tigmint/bin:$PATH
export PATH=/home/eoziolor/program/arks/Examples:$PATH
export PATH=/home/eoziolor/program/arks/Arks:$PATH

module load bio3

cd /home/eoziolor/phgenome/data/tigarks/arks1/

#files
my_fasta=supernova
my_reads=barcoded

#code
arks-make2 arks-tigmint \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=5 \
e=10000 \
r=0.05 \
l=5 \
z=250 \
k=42 \
threads=16 \
t=16
```

* This actually yields a lower assembly than the original. I think it's mostly because of scaffolding errors being fixed from previous pipeline. Let's re-run

### ARKS run 2

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks1/supernova.tigmint_c5_m50-10000_k42_r0.05_e10000_z250_l5_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks2/arks1.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks2/
```
* Changing kmer size to 30 (default) and pushing e from 10 to 15k

```
#!/bin/bash -l

#SBATCH -J runarks2
#SBATCH -o runarks2-%j.o
#SBATCH -e runarks2-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks2/

#files
my_fasta=arks1
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=5 \
e=15000 \
r=0.05 \
l=5 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 3

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks2/arks1_c5_m50-10000_k30_r0.05_e15000_z250_l5_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks3/arks2.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks3/
```
* Changing e value to 20k

```
#!/bin/bash -l

#SBATCH -J runarks3
#SBATCH -o runarks3-%j.o
#SBATCH -e runarks3-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks3/

#files
my_fasta=arks2
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=5 \
e=20000 \
r=0.05 \
l=5 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 4

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks3/arks2_c5_m50-10000_k30_r0.05_e20000_z250_l5_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks4/arks3.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks4/
```
* Changing e value to 25k

```
#!/bin/bash -l

#SBATCH -J runarks4
#SBATCH -o runarks4-%j.o
#SBATCH -e runarks4-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks4/

#files
my_fasta=arks3
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=5 \
e=25000 \
r=0.05 \
l=5 \
z=250 \
k=30 \
threads=16 
```

August 1, 2018
===

### ARKS run 5

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks4/arks3_c5_m50-10000_k30_r0.05_e25000_z250_l5_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks5/arks4.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks5/
```
* Changing e value to 35k
* Changing c and l to 3 (suggested as acceptable in ARCS paper)

```
#!/bin/bash -l

#SBATCH -J runarks5
#SBATCH -o runarks5-%j.o
#SBATCH -e runarks5-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks5/

#files
my_fasta=arks4
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=35000 \
r=0.05 \
l=3 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 6

* Ok I feel like we are running into the limit here, let's loosen the beast

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks5/arks4_c3_m50-10000_k30_r0.05_e35000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks6/arks5.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks6/
```
* Changing e value to 10k
* Changing r to 0.1


```
#!/bin/bash -l

#SBATCH -J runarks6
#SBATCH -o runarks6-%j.o
#SBATCH -e runarks6-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks6/

#files
my_fasta=arks5
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=10000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 7

* LOOOSEN ITTTT

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks6/arks5_c3_m50-10000_k30_r0.1_e10000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks7/arks6.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks7/
```
* Changing e value to 30k
* Changing a to 0.9


```
#!/bin/bash -l

#SBATCH -J runarks7
#SBATCH -o runarks7-%j.o
#SBATCH -e runarks7-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks7/

#files
my_fasta=arks6
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
c=3 \
e=30000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 
```
### ARKS run 8

* Beast has been unleashed, let's iterate

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks7/arks6_c3_m50-10000_k30_r0.1_e30000_z250_l3_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks8/arks7.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks8/
```
* Changing e value to 40k
* keeping a to 0.9


```
#!/bin/bash -l

#SBATCH -J runarks8
#SBATCH -o runarks8-%j.o
#SBATCH -e runarks8-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks8/

#files
my_fasta=arks7
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
c=3 \
e=40000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 
```

Aug 2, 2018
===

### ARKS run 9

* Beast has been unleashed, let's iterate

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks8/arks7_c3_m50-10000_k30_r0.1_e40000_z250_l3_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks9/arks8.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks9/
```
* Changing e value to 50k
* Change c and l back to 5 for the longer scaffolds


```
#!/bin/bash -l

#SBATCH -J runarks9
#SBATCH -o runarks9-%j.o
#SBATCH -e runarks9-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks9/

#files
my_fasta=arks8
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
c=5 \
e=50000 \
r=0.1 \
l=5 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 10

* Beast has been unleashed, let's iterate

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks9/arks8_c5_m50-10000_k30_r0.1_e50000_z250_l5_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks10/arks9.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks10/
```
* Changing e value to 60k
* put r at 0.05 for the largest scaffolds

```
#!/bin/bash -l

#SBATCH -J runarks10
#SBATCH -o runarks10-%j.o
#SBATCH -e runarks10-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks10/

#files
my_fasta=arks9
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
c=5 \
e=60000 \
r=0.1 \
l=5 \
z=250 \
k=30 \
threads=16 
```
### ARKS run 11

* Beast has been unleashed, let's iterate

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks10/arks9_c5_m50-10000_k30_r0.05_e60000_z250_l5_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks11/arks10.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks11/
```
* Changing e value to 10k
* Bringing a back down to 0.5

```
#!/bin/bash -l

#SBATCH -J runarks11
#SBATCH -o runarks11-%j.o
#SBATCH -e runarks11-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks11/

#files
my_fasta=arks10
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=5 \
e=10000 \
r=0.1 \
l=5 \
z=250 \
k=30 \
threads=16 
```
### Arks Run 7b

* I've decided to run another set of iterations with relatively tight parameters and see how things go. I didn't loosen parameters until arks7, so now I will repeat the process with the same other parameters, but not reducing "a", which is important for misassembly prevention.

```
mkdir /home/eoziolor/phgenome/data/altarks/arks7b

ln -s /home/eoziolor/phgenome/data/tigarks/arks6/arks5_c3_m50-10000_k30_r0.1_e10000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/altarks/arks7b/arks6.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/altarks/arks7b/
```
* Now running arks with e=30k, but not changing a value.
* returning r to 0.05

```
#!/bin/bash -l

#SBATCH -J runarks7b
#SBATCH -o runarks7b-%j.o
#SBATCH -e runarks7b-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/altarks/arks7b/

#files
my_fasta=arks6
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=30000 \
r=0.05 \
l=3 \
z=250 \
k=30 \
threads=16 
```

Aug 3, 2018
===

### ARKS run 12

* Iterating with loose parameters one more time to see if everything is ready

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks11/arks10_c5_m50-10000_k30_r0.1_e10000_z250_l5_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks12/arks11.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks12/
```
* e is back to 30k
* a is back to 0.9

```
#!/bin/bash -l

#SBATCH -J runarks12
#SBATCH -o runarks12-%j.o
#SBATCH -e runarks12-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=2-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks12/

#files
my_fasta=arks11
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
c=3 \
e=30000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 8b

* It's looking alright, let's continue repeating the pipeline.

```
ln -s /home/eoziolor/phgenome/data/altarks/arks7b/arks6_c3_m50-10000_k30_r0.05_e30000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/altarks/arks8b/arks7b.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/altarks/arks8b/
```
* Changing e value to 40k


```
#!/bin/bash -l

#SBATCH -J runarks8b
#SBATCH -o runarks8b-%j.o
#SBATCH -e runarks8b-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/altarks/arks8b/

#files
my_fasta=arks7b
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=40000 \
r=0.05 \
l=3 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 13

* Iterating with loose parameters one more time to see if everything is ready

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks12/arks11_c3_m50-10000_k30_r0.1_e30000_z250_l3_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks13/arks12.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks13/
```
* e is back to 30k
* a is back to 0.9

```
#!/bin/bash -l

#SBATCH -J runarks13
#SBATCH -o runarks13-%j.o
#SBATCH -e runarks13-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks13/

#files
my_fasta=arks12
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
c=3 \
e=30000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 9b

* Let's iterate

```
ln -s /home/eoziolor/phgenome/data/altarks/arks8b/arks7b_c3_m50-10000_k30_r0.05_e40000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/altarks/arks9b/arks8b.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/altarks/arks9b/
```
* Changing e value to 50k


```
#!/bin/bash -l

#SBATCH -J runarks9b
#SBATCH -o runarks9b-%j.o
#SBATCH -e runarks9b-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/altarks/arks9b/

#files
my_fasta=arks8b
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=50000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16
```
### ARKS run 14

* Iterating with loose parameters one more time to see if everything is ready

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks13/arks12_c3_m50-10000_k30_r0.1_e30000_z250_l3_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks14/arks13.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks14/
```
* e is back to 30k
* a is back to 0.9

```
#!/bin/bash -l

#SBATCH -J runarks14
#SBATCH -o runarks14-%j.o
#SBATCH -e runarks14-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks14/

#files
my_fasta=arks13
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
c=3 \
e=30000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 9b

* Beast has been unleashed, let's iterate

```
ln -s /home/eoziolor/phgenome/data/altarks/arks9b/arks8b_c3_m50-10000_k30_r0.1_e50000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/altarks/arks10b/arks9b.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/altarks/arks10b/
```
* Changing e value to 50k
* Change c and l back to 5 for the longer scaffolds


```
#!/bin/bash -l

#SBATCH -J runarks10b
#SBATCH -o runarks10b-%j.o
#SBATCH -e runarks10b-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/altarks/arks10b/

#files
my_fasta=arks9b
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=50000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 
```
Aug 4, 2018
===

### ARKS run 15

* Iterating with loose parameters one more time to see if everything is ready

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks14/arks13_c3_m50-10000_k30_r0.1_e30000_z250_l3_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks15/arks14.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks15/
```
* e is back to 30k
* a is back to 0.9

```
#!/bin/bash -l

#SBATCH -J runarks15
#SBATCH -o runarks15-%j.o
#SBATCH -e runarks15-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/tigarks/arks15/

#files
my_fasta=arks14
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.9 \
c=3 \
e=30000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 11b

* Beast has been unleashed, let's iterate

```
ln -s /home/eoziolor/phgenome/data/altarks/arks10b/arks9b_c3_m50-10000_k30_r0.1_e50000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/altarks/arks11b/arks10b.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/altarks/arks11b/
```
* Changing e value to 50k
* Change c and l back to 5 for the longer scaffolds


```
#!/bin/bash -l

#SBATCH -J runarks11b
#SBATCH -o runarks11b-%j.o
#SBATCH -e runarks11b-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/altarks/arks11b/

#files
my_fasta=arks10b
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=10000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 
```

### ARKS run 16

* Ok this could go on forever, but I have no idea if this is actually building a meaningful genome. I am going to run tigmint again on this one and see the result. I will assemble with conservative outcome

```
ln -s /home/eoziolor/phgenome/data/tigarks/arks15/arks14_c3_m50-10000_k30_r0.1_e30000_z250_l3_a0.9.scaffolds.fa /home/eoziolor/phgenome/data/tigarks/arks16/arks15.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/tigarks/arks16/
```
* e is back to 30k
* a is back to 0.5

```
#!/bin/bash -l

#SBATCH -J runarks16
#SBATCH -o runarks16-%j.o
#SBATCH -e runarks16-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=2-00:00
#SBATCH --no-requeue
#SBATCH -p high

export PATH=/home/eoziolor/program/tigmint/bin:$PATH
export PATH=/home/eoziolor/program/arks/Examples:$PATH
export PATH=/home/eoziolor/program/arks/Arks:$PATH
export PATH=/home/eoziolor/program/links_v1.8.6:$PATH

module load bio3

cd /home/eoziolor/phgenome/data/tigarks/arks16/

#files
my_fasta=arks15
my_reads=barcoded

#code
arks-make2 arks-tigmint \
draft=$my_fasta \
reads=$my_reads \
m=8-10000 \
a=0.5 \
c=3 \
e=10000 \
r=0.1 \
l=3 \
z=250 \
k=30 \
threads=16 \
t=16
```

### ARKS run 12b

* So I think we are maxing out at 0.65 Mb at the strict parameters. One thing that I want to troubleshoot is k. I am going to increase it to 60 as they've done in the paper and see if there is a change.

```
ln -s /home/eoziolor/phgenome/data/altarks/arks11b/arks10b_c3_m50-10000_k30_r0.1_e10000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/altarks/arks12b/arks11b.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/altarks/arks12b/
```
* Changing e value to 30k
* Change k to 60
```
#!/bin/bash -l

#SBATCH -J runarks12b
#SBATCH -o runarks12b-%j.o
#SBATCH -e runarks12b-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/altarks/arks12b/

#files
my_fasta=arks11b
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=10000 \
r=0.1 \
l=3 \
z=250 \
k=60 \
threads=16 
```

Aug 5, 2018
===

### ARKS run 12b

* So I think we are maxing out at 0.65 Mb at the strict parameters. One thing that I want to troubleshoot is k. I am going to increase it to 60 as they've done in the paper and see if there is a change.

```
ln -s /home/eoziolor/phgenome/data/altarks/arks12b/arks11b_c3_m50-10000_k60_r0.1_e10000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/altarks/arks13b/arks12b.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/altarks/arks13b/
```
* Changing e value to 30k
* Keep k to 60
```
#!/bin/bash -l

#SBATCH -J runarks13b
#SBATCH -o runarks13b-%j.o
#SBATCH -e runarks13b-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/altarks/arks13b/

#files
my_fasta=arks12b
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=30000 \
r=0.1 \
l=3 \
z=250 \
k=60 \
threads=16 
```
### ARKS run 13b

* Changing the k to 60 improved assembly when e was at 30. Changing it to 40k to see if that improves longer scaffolds.

```
ln -s /home/eoziolor/phgenome/data/altarks/arks13b/arks12b_c3_m50-10000_k60_r0.1_e30000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/altarks/arks14b/arks13b.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/altarks/arks14b/
```
* Changing e value to 40k
* Keep k to 60
```
#!/bin/bash -l

#SBATCH -J runarks14b
#SBATCH -o runarks14b-%j.o
#SBATCH -e runarks14b-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/altarks/arks14b/

#files
my_fasta=arks13b
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=40000 \
r=0.1 \
l=3 \
z=250 \
k=60 \
threads=16 
```
### ARKS run 15b

* Changing the k to 60 improved assembly when e was at 30. Changing it back to 30k to iterate.

```
ln -s /home/eoziolor/phgenome/data/altarks/arks14b/arks13b_c3_m50-10000_k60_r0.1_e40000_z250_l3_a0.5.scaffolds.fa /home/eoziolor/phgenome/data/altarks/arks15b/arks14b.fa
ln -s /home/eoziolor/phgenome/data/raw/NewFastq/outs/barcoded.fastq.gz /home/eoziolor/phgenome/data/altarks/arks15b/
```
* Changing e value to 30k
* Keep k to 60
```
#!/bin/bash -l

#SBATCH -J runarks15b
#SBATCH -o runarks15b-%j.o
#SBATCH -e runarks15b-%j.o
#SBATCH -N 1
#SBATCH -n 16
#SBATCH --mem=60000
#SBATCH --time=1-00:00
#SBATCH --no-requeue
#SBATCH -p high

source ~/.bashrc

cd /home/eoziolor/phgenome/data/altarks/arks15b/

#files
my_fasta=arks14b
my_reads=barcoded

#code
arks-make2 arks \
draft=$my_fasta \
reads=$my_reads \
m=50-10000 \
a=0.5 \
c=3 \
e=30000 \
r=0.1 \
l=3 \
z=250 \
k=60 \
threads=16 
```
